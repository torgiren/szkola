Specyfikacja "asemblera"
mov reg reg/value //move
add reg/val //add register val/val to ax value. result in ax
sub reg/val //sub register val/val to ax value. result in ax
mul reg/val //mul register val/val to ax value. result in ax
div reg/val //div register val/val to ax value. result in ax
inc reg //increment value
dec reg //decrement value
jz line //jump if zero to <line> TODO: jump to label
jnz line //jump if non zero to <line> TODO: jump to label
jmp line //jump to line
push reg/val //push register or value on stack
pop [reg] //pop from stack. optionaly save val to reg
noop //noop
alloc size //alloc <size> ints on stack
free size //free <size> ints from stack
cmp ->	zf=1 i równe
		zf=0 jeśli różne
int nr //interupt number <nr>
	1 -> I/O
		ax -> 1 //write to stdout
			bx //address of string to be printed
		ax -> 2 read from stdin
			bx //oddress of string to be readed
	2 -> Variable operations 
		ax -> 1 //string to real conversion
			bx //address of string
			cx //integer part
			dx //fractional part
		ax -> 2 //real to string conversion
			bx //address of string
			cx //integer part
			dx //fractional part
		ax -> 3 //string concat
			bx //address of destination string
			cx //address of source string
		ax -> 4 //string copy
			bx //address of destination
			cx //sddres of source string
	8 -> return
		ax // exit value
